#!/usr/bin/env bash

set -Eeuo pipefail

# get, set, increment, and decrement volume levels with pactl
#
# commands like `pactl set-sink-volume @DEFAULT_SINK@ +10%` have a few undesired / unexpected
# effects, such as the ability to increase volume WAY over 100%. this script is a simplified
# wrapper around `pactl` that:
#
# * assumes there's just "volume". no left channel, right channel, balance, etc.
# * adjusts volume based on percentages. no dB, arbitrary integer values, etc.
# * ensures volume stays strictly between 0% and 100%
# * only adjusts the @DEFAULT_SINK@ or @DEFAULT_SOURCE@ -- if you want something else, you can use
#   `pactl` directly.
#
# especially useful when you need to manually rig up a volume up / down / mute button on your
# keyboard. not so useful when you're making more advanced audio tweaks.
#

usage() {
  local command_name
  command_name="$(basename "${0}")"
  cat <<EOF
${command_name}: Dumbed-down pactl volume interface

usage: ${command_name} [OPTIONS...] [SUBCOMMAND]

subcommands:

    get                 get current volume level
    set VOLUME_LEVEL    set volume level between 0 and 100
    up                  increase volume level
    down                decrease volume level
    help                show this message

options:

    --mic:    adjust input (source) volume instead of output (sink) volume
    --help:   show this message

examples:

    # get current volume:
    ${command_name}
    ${command_name} get

    # set new volume:
    ${command_name} set 0
    ${command_name} set 50
    ${command_name} set 100

    # adjust volume relatively:
    ${command_name} up
    ${command_name} down
    PACTL_VOLUME_INCREMENT=15 ${command_name} up

    # set volume for microphone:
    ${command_name} --mic set 75

EOF
}

panic() {
  echo "${*}" >&2
  exit 1
}

init() {
  PACTL_VOLUME_INCREMENT="${PACTL_VOLUME_INCREMENT:-10}"
  DEVICE="@DEFAULT_SINK@"
  TARGET="sink"
  SUBCOMMAND="get"
  SUBCOMMAND_ARGS=()
}

subcommand:get() {
  pactl "get-${TARGET}-volume" "${DEVICE}" \
    | awk '$1 == "Volume:" {print $0}' \
    | grep --perl-regexp --only-matching "[\d\.]+(?=%)" \
    | head -n 1
}

subcommand:set() {
  local new_level="${1}"
  test "${new_level}" -ge 0 || panic "volume must be greater than or equal to 0"
  test "${new_level}" -le 100 || panic "volume must be less than or equal to 100"
  pactl "set-${TARGET}-volume" "${DEVICE}" "${new_level}%"
}

subcommand:up() {
  local current_vol new_vol
  current_vol="$(subcommand:get)"
  new_vol=$((current_vol + PACTL_VOLUME_INCREMENT))
  if [ "${new_vol}" -ge 100 ]; then
    subcommand:set 100
  elif [ "${new_vol}" -le 0 ]; then
    subcommand:set 0
  else
    subcommand:set "${new_vol}"
  fi

  subcommand:get
}

subcommand:down() {
  local current_vol new_vol
  current_vol="$(subcommand:get)"
  new_vol=$((current_vol - PACTL_VOLUME_INCREMENT))
  if [ "${new_vol}" -ge 100 ]; then
    subcommand:set 100
  elif [ "${new_vol}" -le 0 ]; then
    subcommand:set 0
  else
    subcommand:set "${new_vol}"
  fi

  subcommand:get
}

subcommand:help() {
  usage
}

parse_args() {
  while [ ${#} -ge 1 ]; do
    case "${1}" in
      up)
        SUBCOMMAND="up"
        ;;
      down)
        SUBCOMMAND="down"
        ;;
      get | "")
        SUBCOMMAND="get"
        ;;
      set)
        SUBCOMMAND="set"
        SUBCOMMAND_ARGS=("${2:?must specify volume level between 0 and 100}")
        shift
        ;;
      --mic)
        TARGET="source"
        DEVICE="@DEFAULT_SOURCE@"
        ;;
      help | -h | --help | /?)
        SUBCOMMAND="help"
        ;;
      *)
        panic "unrecognized arg: \"${1}\". see --help for usage."
        ;;
    esac
    shift
  done
}

main() {
  init
  parse_args "${@}"
  "subcommand:${SUBCOMMAND}" "${SUBCOMMAND_ARGS[@]}"
}

main "$@"
