#!/usr/bin/env nu

const BASE_URL = "https://kagi.com/api/v0"

# Kagi CLI
def main [] {
    "ERROR: Must specify a subcommand.\n" | print
    ^$env.CURRENT_FILE --help
}

# Query FastGPT
def "main gpt" [
    query: string  # Query to send to FastGPT
    --verbose(-v)  # Display meta information at the end
] {

    # <https://help.kagi.com/kagi/api/fastgpt.html#examples>
    let response = (
        api_post fastgpt {
            query: $query
            cache: true
        }
    )

    let data = $response.data

    print $data.output

    if ($data | get references --ignore-errors | length) > 0 {
        print "References:\n"
        $data.references | enumerate | each {|it|
            print $"($it.index + 1). [($it.item.title)]\(($it.item.url))"
        }
    }

    if $verbose {
        print ""
        print "---"
        print ""
        print $"* **Tokens used:** _($data.tokens)_"
        print $"* **API balance:** _$($response.meta.api_balance)_"
    }

    ignore
}

# Summarize a URL
def "main summarize" [
    url: string             # URL to summarize
    --type(-t) = "summary"  # `summary` or `takeaway`
    --engine(-e) = "cecil"  # Engine to use. `cecil`, `agnes`, `daphne`, `muriel`
    --language(-l): string  # Output language (two-letter code)
    --verbose(-v)           # Verbose output at end
] {
    def get_params [] {
        let api_params = {
            url: $url
            engine: $engine  # https://help.kagi.com/kagi/api/summarizer.html#summarization-engines
            summary_type: $type
        }

        if ($language != null) and (($language | str length) > 0) {
            # https://help.kagi.com/kagi/api/summarizer.html#target-language-codes
            $api_params | insert target_language $language
        } else {
            $api_params
        }
    }

    let response = (
        api_post summarize (get_params)
    )

    let data = $response.data

    print $data.output

    if $verbose {
        let meta = $response.meta
        print ""
        print "---"
        print ""
        print $"* **Tokens used:** _($data.tokens)_"
        print $"* **Time:** _($meta.ms)_"
        print $"* **API balance:** _$($meta.api_balance)_"
    }

    ignore
}

def api_post [endpoint: string, data: record] {
    (
        http post
            --content-type "application/json"
            --headers ["Authorization" $"Bot ($env.KAGI_TOKEN)"]
            $"($BASE_URL)/($endpoint)"
            $data
    )
}
