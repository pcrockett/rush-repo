#!/usr/bin/env bash
set -Eeuo pipefail

# Fuzzy-find pueue jobs and run pueue commands against them
#
# Example usage:
#
#     # run `pueue follow <selected_job_id>`
#     fzpu follow
#
#     # run `pueue log --full <selected_job_ids...>`
#     fzpu log --full
#
#     # run `pueue remove <selected_job_ids...>`
#     fzpu remove
#

CLI_ARGS=("${@}")

select_job_ids() {

  local js_query

  # construct an `fx` query that returns the following lines from `pueue status --json`:
  #
  #     TASK_ID\\STATUS\\COMMAND\\PATH\\GROUP
  #
  # we will use `\\` as the delimiter later when running the `column` command, to give
  # us a nice table output.
  #
  js_query="$(
    cat <<EOF
status => Object.values(status.tasks)
    .map(task => {
        // task.status can be one of the following:
        //
        // * "Running"
        // * { "Done": "Success" }
        // * { "Done": { "Failed": <exit_code> } }
        //
        // gross, but we can work with it.
        let status = typeof task.status === "string" ? task.status : task.status.Done;
        status = typeof status === "string" ? status : \`Failed (\${status.Failed})\`;

        let command = task.command.length < 70 ? task.command : \`\${task.command.substr(0, 70)}...\`;
        command = command.replaceAll("\n", " ").trim();
        return \`\${task.id}\\\\\${status}\\\\\${command}\\\\\${task.path}\\\\\${task.group}\`;
    })
    .join("\n")
EOF
  )"

  # shellcheck disable=SC1003  # double-backslash is not meant for escaping.
  pueue status --json \
    | fx "${js_query}" \
    | column \
      --table \
      --separator '\' \
      --table-columns ID,Status,Command,Path,Group \
      --table-truncate Command,Path \
      --table-noextreme Command,Path \
      --output-width "${OUTPUT_WIDTH}" \
    | fzf --multi --tac --height 10 --header-lines 1 \
    | awk '{print $1}'
}

main() {
  if [ "${#CLI_ARGS[@]}" -eq 0 ]; then
    # user just wants to see `pueue status`
    pueue status
    exit 0
  fi

  OUTPUT_WIDTH="$(tput cols)"
  OUTPUT_WIDTH=$((OUTPUT_WIDTH - 3))

  if [ "${OUTPUT_WIDTH}" -le 0 ]; then
    echo "Error: output width \"${OUTPUT_WIDTH}\"?"
    exit 1
  fi

  local jobs
  jobs="$(select_job_ids)"
  test "${jobs}" != "" || exit 1 # user probably hit ctrl+c in fzf interface

  echo "${jobs}" | xargs pueue "${CLI_ARGS[@]}"
}

main
