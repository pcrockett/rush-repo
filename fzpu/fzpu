#!/usr/bin/env bash
set -Eeuo pipefail

# Fuzzy-find pueue jobs and run pueue commands against them
#
# Example usage:
#
#     # run `pueue follow <selected_job_id>`
#     fzpu follow
#
#     # run `pueue log --full <selected_job_ids...>`
#     fzpu log --full
#
#     # run `pueue remove <selected_job_ids...>`
#     fzpu remove
#

CLI_ARGS=("${@}")

select_job_ids() {

    local js_query
    js_query="$(cat <<EOF
status => Object.values(status.tasks)
    .map(task => {
        return \`\${task.id}\\\\\${task.status}\\\\\${task.command}\\\\\${task.path}\\\\\${task.group}\`
    })
    .join("\n")
EOF
)"

    # TODO: Fix status output. When running, it's just a string. When done, it's an object with "Done" key. ðŸ˜¦
    # shellcheck disable=SC1003  # double-backslash is not meant for escaping.
    pueue status --json \
        | fx "${js_query}" \
        | column --table --separator '\\' --table-columns ID,Status,Command,Path,Group \
        | fzf --multi --tac --height 10 --header-lines 1 \
        | awk '{print $1}'
}

main() {
    if [ "${#CLI_ARGS[@]}" -eq 0 ]; then
        # user just wants to see `pueue status`
        pueue status
        exit 0
    fi

    local jobs
    jobs="$(select_job_ids)"
    test "${jobs}" != "" || exit 1  # user probably hit ctrl+c in fzf interface

    echo "${jobs}" | xargs pueue "${CLI_ARGS[@]}"
}

main
